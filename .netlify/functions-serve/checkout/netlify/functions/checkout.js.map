{
  "version": 3,
  "sources": ["../../../../nardopay/netlify/functions/checkout.ts"],
  "sourceRoot": "C:/Users/SMOYO/AppData/Local/Temp/tmp-18404-ohh4g6Qhv5cv",
  "sourcesContent": ["import type { Handler } from '@netlify/functions'\n\nconst json = (statusCode: number, data: unknown) => ({\n\tstatusCode,\n\theaders: { 'content-type': 'application/json' },\n\tbody: JSON.stringify(data)\n})\n\nasync function initiatePaystack(body: any) {\n\tconst secret = process.env.PAYSTACK_SECRET_KEY\n\tif (!secret) return json(500, { error: 'Missing PAYSTACK_SECRET_KEY' })\n\n\tconst { amount, currency, email, linkId, metadata } = body\n\tif (currency !== 'NGN') return json(400, { error: 'Paystack requires NGN currency for card init' })\n\n\tconst naira = Number(amount)\n\tif (!Number.isFinite(naira) || naira <= 0) return json(400, { error: 'Invalid amount' })\n\tconst kobo = Math.round(naira * 100)\n\n\tconst res = await fetch('https://api.paystack.co/transaction/initialize', {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Authorization': `Bearer ${secret}`,\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\temail: email || 'customer@example.com',\n\t\t\tamount: kobo,\n\t\t\tcurrency: 'NGN',\n\t\t\tmetadata: { linkId, ...(metadata || {}) }\n\t\t})\n\t})\n\n\tif (!res.ok) {\n\t\tconst text = await res.text().catch(() => '')\n\t\treturn json(res.status, { error: 'Paystack init failed', details: text })\n\t}\n\tconst data = await res.json()\n\treturn json(200, { provider: 'paystack', data })\n}\n\nexport const handler: Handler = async (event) => {\n\tif (event.httpMethod !== 'POST') return json(405, { error: 'Method Not Allowed' })\n\ttry {\n\t\tconst body = event.body ? JSON.parse(event.body) : {}\n\t\tconst { linkId, amount, currency, rail } = body\n\t\tif (!linkId || amount === undefined || !currency || !rail) return json(400, { error: 'Missing fields' })\n\n\t\tif (rail === 'paystack') {\n\t\t\treturn await initiatePaystack({ ...body })\n\t\t}\n\n\t\tif (rail === 'flutterwave') {\n\t\t\tconst secret = process.env.FLW_SECRET_KEY\n\t\t\tconst publicKey = process.env.FLW_PUBLIC_KEY\n\t\t\tif (!secret || !publicKey) return json(500, { error: 'Missing FLW keys' })\n\n\t\t\tconst tx_ref = `flw_${Date.now().toString(36)}_${Math.random().toString(36).slice(2,8)}`\n\t\t\tconst payload = {\n\t\t\t\ttx_ref,\n\t\t\t\tamount,\n\t\t\t\tcurrency,\n\t\t\t\tredirect_url: process.env.SITE_URL || process.env.VITE_API_BASE_URL || 'http://localhost:8888',\n\t\t\t\tcustomer: {\n\t\t\t\t\temail: body.email || 'customer@example.com'\n\t\t\t\t},\n\t\t\t\tmeta: { linkId }\n\t\t\t}\n\n\t\t\tconst res = await fetch('https://api.flutterwave.com/v3/payments', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': `Bearer ${secret}`,\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(payload)\n\t\t\t})\n\n\t\t\tif (!res.ok) {\n\t\t\t\tconst text = await res.text().catch(() => '')\n\t\t\t\treturn json(res.status, { error: 'Flutterwave init failed', details: text })\n\t\t\t}\n\t\t\tconst data = await res.json()\n\t\t\treturn json(200, { provider: 'flutterwave', data })\n\t\t}\n\n\t\t// TODO: implement mpesa, paynow, mtnmomo\n\t\treturn json(501, { error: 'Selected rail not implemented yet', rail })\n\t} catch (err: any) {\n\t\treturn json(500, { error: 'Internal error', details: err?.message || String(err) })\n\t}\n}\n\n\n"],
  "mappings": "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",
  "names": []
}
